CREATE TABLE VENDOR (
  VendorID SERIAL,
  Vendor_Name VARCHAR(30) NOT NULL,
  Vendor_Address VARCHAR(30) NOT NULL,
  Vendor_City VARCHAR(30) NOT NULL,
  Vendor_Province CHAR(2) NOT NULL,
  Vendor_PostalCode CHAR(6) NOT NULL,
  Vendor_Phone NUMERIC NOT NULL,
  Vendor_Email VARCHAR(40) NOT NULL,
  ContactFirstName VARCHAR(30) NOT NULL,
  ContactLastName VARCHAR(30) NOT NULL,
  PRIMARY KEY (VendorID)
);


CREATE TABLE Product (
  ProductID SERIAL,
  VendorID INTEGER NOT NULL,
  Product_Name VARCHAR(100) NOT NULL,
  ProductType CHAR(1) NOT NULL,
  PRIMARY KEY (ProductID)
);


CREATE TABLE CLAIMS (
  ClaimID SERIAL,
  PatientID INTEGER  NOT NULL,
  InsurerID INTEGER  NOT NULL,
  ComplaintID INTEGER  NOT NULL,
  Procedure_Name VARCHAR(100)  NOT NULL,
  Insurance_Code INTEGER NOT NULL,
  Submission_Date DATE NOT NULL,
  Amount_Submitted DECIMAL(6,2)  NOT NULL,
  Amount_Covered DECIMAL(6,2)  NOT NULL,
  PRIMARY KEY (ClaimID)
);

CREATE TABLE Complaint_Description (
  ComplaintDescID SERIAL,
  ComplaintID INTEGER NOT NULL,
  Complaint_Description VARCHAR(5000) NOT NULL,
  PRIMARY KEY (ComplaintDescID, ComplaintID)
);

CREATE TABLE CONSUMABLES (
  CInventoryID INTEGER NOT NULL,
  Consumable_Name VARCHAR(30) NOT NULL,
  PRIMARY KEY (CInventoryID)
);


CREATE TABLE INVENTORY (
  InventoryID SERIAL,
  Inventory_Max_Level INTEGER NOT NULL,
  InventoryType CHAR(1) NOT NULL,
  PRIMARY KEY (InventoryID)
);

CREATE TABLE ALMA_MATER (
  AlmaMaterID SERIAL,
  MEmployeeID INTEGER NOT NULL,
  AlmaMater_Name VARCHAR(20) NOT NULL,
  PRIMARY KEY (AlmaMaterID, MEmployeeID)
);

CREATE TABLE MEDICAL_DETAILS (
  Medical_ID SERIAL,
  PatientID INTEGER NOT NULL,
  Medical_Details VARCHAR(5000),
  PRIMARY KEY (Medical_ID, PatientID)
);

CREATE TABLE Diagnosis_Details (
  DiagnosisID SERIAL,
  ComplaintID INTEGER NOT NULL,
  Diagnosis_Details VARCHAR(5000) NOT NULL,
  PRIMARY KEY (DiagnosisID, ComplaintID)
);


CREATE TABLE COMPLAINTS (
  ComplaintID SERIAL,
  PatientID INTEGER NOT NULL,
  Complaint_Start_Date DATE  NOT NULL,
  Complaint_End_Date DATE,
  PRIMARY KEY (ComplaintID)
);


CREATE TABLE MEDICATIONS (
  MinventoryID INTEGER NOT NULL,
  Medication_Name VARCHAR(30) NOT NULL,
  PRIMARY KEY (MinventoryID)
);

CREATE TABLE Job_History (
  HistoryID SERIAL,
  EmployeeID INTEGER NOT NULL,
  Job_Title VARCHAR(40) NOT NULL,
  JobStartDate DATE NOT NULL,
  JobEndDate DATE,
  PRIMARY KEY (HistoryID)
);

CREATE TABLE INSURANCE (
  InsurerID SERIAL,
  Insurer_Name VARCHAR(30)  NOT NULL,
  Insurer_Phone NUMERIC  NOT NULL,
  Insurer_Email VARCHAR(40)  NOT NULL,
  PRIMARY KEY (InsurerID)
);

CREATE TABLE Doctor_Notes (
  DoctorNotesID SERIAL,
  ComplaintID INTEGER NOT NULL,
  Doctor_Notes VARCHAR(5000) NOT NULL,
  PRIMARY KEY (DoctorNotesID, ComplaintID)
);

CREATE TABLE PATIENTS (
  PatientID SERIAL,
  Patient_FirstName VARCHAR(30) NOT NULL,
  Patient_LastName VARCHAR(30) NOT NULL,
  Patient_Address VARCHAR(30) NOT NULL,
  Patient_City VARCHAR(30) NOT NULL,
  Patient_Province CHAR(2) NOT NULL,
  Patient_PostalCode CHAR(6) NOT NULL,
  Patient_Phone NUMERIC,
  Patient_Email VARCHAR(40),
  Patient_DOB DATE NOT NULL,
  Patient_Gender CHAR(1) NOT NULL,
  OHIP NUMERIC,
  NextOfKin_FirstName VARCHAR(30),
  NextOfKin_LastName VARCHAR(30),
  NextOfKin_Phone NUMERIC,
  Family_Doctor_FirstName VARCHAR(30),
  Family_Doctor_LastName VARCHAR(30),
  Family_Doctor_Phone NUMERIC,
  PRIMARY KEY (PatientID)
);

CREATE TABLE ALLERGIES (
  Allergy_ID SERIAL,
  PatientID INTEGER NOT NULL,
  Allergy VARCHAR(100)  NOT NULL,
  PRIMARY KEY (Allergy_ID, PatientID)
);


CREATE TABLE INVENTORY_USAGE_TRACKER (
  InvUseID SERIAL,
  InventoryID INTEGER NOT NULL,
  ComplaintID INTEGER NOT NULL,
  Date_Consumed DATE NOT NULL,
  Quantity_Consumed INTEGER NOT NULL,
  PRIMARY KEY (InvUseID)
);


CREATE TABLE CREDENTIALS (
  CredentialID SERIAL,
  EmployeeID INTEGER NOT NULL,
  Credential_Description VARCHAR(40) NOT NULL,
  PRIMARY KEY (CredentialID, EmployeeID)
);


CREATE TABLE SKILLS (
  SkillID SERIAL,
  EmployeeID INTEGER NOT NULL,
  Skill_Description VARCHAR(20) NOT NULL,
  PRIMARY KEY (SkillID, EmployeeID)
);


CREATE TABLE Treatment_Details (
  TreatmentID SERIAL,
  ComplaintID INTEGER NOT NULL,
  Treatment_Details VARCHAR(5000) NOT NULL,
  PRIMARY KEY (TreatmentID, ComplaintID)
);


CREATE TABLE EMPLOYEES (
  EmployeeID SERIAL,
  Employee_FirstName VARCHAR(30) NOT NULL,
  Employee_LastName VARCHAR(30) NOT NULL,
  Employee_Address VARCHAR(30) NOT NULL,
  Employee_City VARCHAR(30) NOT NULL,
  Employee_Province VARCHAR(2) NOT NULL,
  Employee_PostalCode CHAR(6) NOT NULL,
  Employee_Phone NUMERIC NOT NULL,
  Employee_Email VARCHAR(40) NOT NULL,
  Current_Position_Title VARCHAR(40) NOT NULL,
  Employee_DOB DATE NOT NULL,
  Employee_Gender CHAR(1) NOT NULL,
  EmployeeType CHAR(1) NOT NULL,
  PRIMARY KEY (EmployeeID)
);

CREATE TABLE PURCHASE_ORDER (
  OrderID SERIAL,
  VendorID INTEGER NOT NULL,
  InventoryID INTEGER NOT NULL,
  Vendor_Name VARCHAR(30) NOT NULL,
  OrderDate DATE NOT NULL,
  OrderQuantity INTEGER NOT NULL,
  Product_Name VARCHAR(100) NOT NULL,
  Contact_FirstName VARCHAR(30) NOT NULL,
  Contact_LastName VARCHAR(30) NOT NULL,
  PRIMARY KEY (OrderID)
);


CREATE TABLE NONMEDICAL (
  NMEmployeeID INTEGER NOT NULL,
  Department VARCHAR(20) NOT NULL,
  PRIMARY KEY (NMEmployeeID)
);


CREATE TABLE MEDICAL (
  MEmployeeID INTEGER NOT NULL,
  Speciality VARCHAR(20),
  PRIMARY KEY (MEmployeeID)
);


CREATE TABLE APPOINTMENTS (
  AppointmentID SERIAL,
  MEmployeeID INTEGER NOT NULL,
  PatientID INTEGER NOT NULL,
  Scheduled_Date DATE NOT NULL,
  Scheduled_Time TIME  NOT NULL,
  Scheduled_Duration INTEGER NOT NULL,
  Actual_Date DATE,
  Actual_Start_Time TIME,
  Actual_End_Time TIME,
  PRIMARY KEY (AppointmentID)
);


CREATE TABLE COMPLAINTS_APPOINTMENT_TRACKER (
  CAID SERIAL,
  ComplaintID INTEGER NOT NULL,
  AppointmentID INTEGER NOT NULL,
  PRIMARY KEY (CAID)
);


-- Adding PK to FK links

ALTER TABLE Job_History ADD CONSTRAINT FK_Job_History FOREIGN KEY (EmployeeID) REFERENCES EMPLOYEES (EmployeeID);
ALTER TABLE CREDENTIALS ADD CONSTRAINT FK_CREDENTIALS FOREIGN KEY (EmployeeID) REFERENCES EMPLOYEES (EmployeeID);
ALTER TABLE SKILLS ADD CONSTRAINT FK_SKILLS FOREIGN KEY (EmployeeID) REFERENCES EMPLOYEES (EmployeeID);
ALTER TABLE NONMEDICAL ADD CONSTRAINT FK_NONMEDICAL FOREIGN KEY (NMEmployeeID) REFERENCES EMPLOYEES (EmployeeID);
ALTER TABLE MEDICAL ADD CONSTRAINT FK_MEDICAL FOREIGN KEY (MEmployeeID) REFERENCES EMPLOYEES (EmployeeID);
ALTER TABLE ALMA_MATER ADD CONSTRAINT FK_ALMA_MATER FOREIGN KEY (MEmployeeID) REFERENCES MEDICAL (MEmployeeID);
ALTER TABLE APPOINTMENTS ADD CONSTRAINT FK1_APPOINTMENTS FOREIGN KEY (MEmployeeID) REFERENCES MEDICAL (MEmployeeID);
ALTER TABLE APPOINTMENTS ADD CONSTRAINT FK2_APPOINTMENTS FOREIGN KEY (PatientID) REFERENCES PATIENTS (PatientID);
ALTER TABLE ALLERGIES ADD CONSTRAINT FK_ALLERGIES FOREIGN KEY (PatientID) REFERENCES PATIENTS (PatientID);
ALTER TABLE MEDICAL_DETAILS ADD CONSTRAINT FK_MEDICAL_DETAILS FOREIGN KEY (PatientID) REFERENCES PATIENTS (PatientID);
ALTER TABLE CLAIMS ADD CONSTRAINT FK1_CLAIMS FOREIGN KEY (PatientID) REFERENCES PATIENTS (PatientID);
ALTER TABLE CLAIMS ADD CONSTRAINT FK2_CLAIMS FOREIGN KEY (ComplaintID) REFERENCES COMPLAINTS (ComplaintID);
ALTER TABLE CLAIMS ADD CONSTRAINT FK3_CLAIMS FOREIGN KEY (InsurerID) REFERENCES INSURANCE (InsurerID);
ALTER TABLE Treatment_Details ADD CONSTRAINT FK_Treatment_Details FOREIGN KEY (ComplaintID) REFERENCES COMPLAINTS (ComplaintID);
ALTER TABLE Diagnosis_Details ADD CONSTRAINT FK_Diagnosis_Details FOREIGN KEY (ComplaintID) REFERENCES COMPLAINTS (ComplaintID);
ALTER TABLE Doctor_Notes ADD CONSTRAINT FK_Doctor_Notes FOREIGN KEY (ComplaintID) REFERENCES COMPLAINTS (ComplaintID);
ALTER TABLE Complaint_Description ADD CONSTRAINT FK_Complaint_Description FOREIGN KEY (ComplaintID) REFERENCES COMPLAINTS (ComplaintID);
ALTER TABLE INVENTORY_USAGE_TRACKER ADD CONSTRAINT FK1_INVENTORY_USAGE_TRACKER FOREIGN KEY (ComplaintID) REFERENCES COMPLAINTS (ComplaintID);
ALTER TABLE INVENTORY_USAGE_TRACKER ADD CONSTRAINT FK2_INVENTORY_USAGE_TRACKER FOREIGN KEY (InventoryID) REFERENCES INVENTORY (InventoryID);
ALTER TABLE CONSUMABLES ADD CONSTRAINT FK_CONSUMABLES FOREIGN KEY (CInventoryID) REFERENCES INVENTORY (InventoryID);
ALTER TABLE MEDICATIONS ADD CONSTRAINT FK_MEDICATIONS FOREIGN KEY (MinventoryID) REFERENCES INVENTORY (InventoryID);
ALTER TABLE PURCHASE_ORDER ADD CONSTRAINT FK1_PURCHASE_ORDER FOREIGN KEY (InventoryID) REFERENCES INVENTORY (InventoryID);
ALTER TABLE PURCHASE_ORDER ADD CONSTRAINT FK2_PURCHASE_ORDER FOREIGN KEY (VendorID) REFERENCES VENDOR (VendorID);
ALTER TABLE COMPLAINTS_APPOINTMENT_TRACKER ADD CONSTRAINT FK1_COMPLAINTS_APPOINTMENT_TRACKER FOREIGN KEY (ComplaintID) REFERENCES COMPLAINTS (ComplaintID);
ALTER TABLE COMPLAINTS_APPOINTMENT_TRACKER ADD CONSTRAINT FK2_COMPLAINTS_APPOINTMENT_TRACKER FOREIGN KEY (AppointmentID) REFERENCES APPOINTMENTS (AppointmentID);
ALTER TABLE COMPLAINTS ADD CONSTRAINT FK_COMPLAINTS FOREIGN KEY (PatientID) REFERENCES PATIENTS (PatientID);
ALTER TABLE Product ADD CONSTRAINT FK_Product FOREIGN KEY (VendorID) REFERENCES VENDOR (VendorID);



-- View Inventory_Usage_View

CREATE VIEW Inventory_Usage_View AS
SELECT InventoryID, SUM(Quantity_Consumed) FROM INVENTORY_USAGE_TRACKER WHERE Date_Consumed = Current_Date GROUP BY InventoryID;

-- View Current_Inventory_Levels_View 

CREATE VIEW Current_Inventory_Levels_View AS
SELECT DISTINCT inventory_usage_view.inventoryid, (Inventory.Inventory_Max_Level - Inventory_Usage_View.sum) AS Current_Level FROM Inventory, Inventory_Usage_View WHERE Inventory.InventoryID IN (SELECT InventoryID FROM Inventory_Usage_Tracker);
